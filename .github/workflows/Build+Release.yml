# ---------------------------------------------------------------------------------------------
# Copyright (C) ygguser 2023.
# https://github.com/ygguser
#
# Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).
# ---------------------------------------------------------------------------------------------

name: Build & Release

on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  get_version:
    name: Get version from Cargo.toml
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ env.VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Getting version
        run: echo "VERSION=$(sed -nE 's/^version\s*=\s*(\S*)$/\1/p' Cargo.toml | tr -d '\"')" >> $GITHUB_ENV
        
  create_release_draft:
    name: Create the release draft
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release-draft.outputs.id }}
    needs: get_version
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Extract release notes
        id: extract-release-notes
        uses: ffurrer2/extract-release-notes@v1

      - name: Create release draft
        id: create-release-draft
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.get_version.outputs.release_version }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Peers updater v. ${{ env.VERSION }}
          draft: true
          prerelease: false
          body: ${{ steps.extract-release-notes.outputs.release_notes }}

  build_and_upload:
    name: Create and upload binaries
    needs: [ create_release_draft ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        #target: [ i686-unknown-linux-gnu, aarch64-unknown-linux-gnu, x86_64-unknown-linux-gnu, arm-unknown-linux-gnueabi, i686-pc-windows-gnu, x86_64-pc-windows-gnu, armv7-unknown-linux-gnueabihf, x86_64-apple-darwin ]
        target: [ x86_64-apple-darwin ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Preparing for cross-compilation (darwin)
        if: ${{contains(matrix.target, 'darwin')}}
        run: |
          sudo apt update && sudo DEBIAN_FRONTEND='noninteractive' apt-get -y -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' upgrade && sudo apt-get -y install zip upx musl-tools
          cargo install cross
          rustup update
          rustup toolchain install nightly
          curl -L https://github.com/roblabla/MacOSX-SDKs/releases/download/13.3/MacOSX13.3.sdk.tar.xz | tar xJ
          export SDKROOT=$(pwd)/MacOSX13.3.sdk/
          export PATH=$PATH:~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin/
          export CARGO_TARGET_X86_64_APPLE_DARWIN_LINKER=rust-lld
          rustup target add x86_64-apple-darwin
          rustup component add rust-src --toolchain nightly
          #cargo build --release --target x86_64-apple-darwin
          #rustup toolchain install nightly-2023-02-15-x86_64-unknown-linux-gnu
          #rustup component add rust-src --toolchain nightly-2023-02-15-x86_64-unknown-linux-gnu
          #mv ~/.rustup/toolchains/nightly-2023-02-15-x86_64-unknown-linux-gnu ~/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu
          #cargo update -p clap_lex@0.6.0 --precise 0.5.0
          
      - name: Preparing for cross-compilation (arm)
        if: ${{contains(matrix.target, 'armv7-unknown-linux-gnueabihf') || contains(matrix.target, 'arm-unknown-linux-gnueabi')}}
        run: |
          sudo apt update && sudo DEBIAN_FRONTEND='noninteractive' apt-get -y -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' upgrade && sudo apt-get -y install zip upx gcc-arm-linux-gnueabihf
          cargo install cross
          rustup update
          rustup toolchain install nightly
          rustup component add rust-src --toolchain nightly
          #rustup toolchain install nightly-2023-02-15-x86_64-unknown-linux-gnu
          #rustup component add rust-src --toolchain nightly-2023-02-15-x86_64-unknown-linux-gnu
          #mv ~/.rustup/toolchains/nightly-2023-02-15-x86_64-unknown-linux-gnu ~/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu
          #cargo update -p clap_lex@0.6.0 --precise 0.5.0

      - name: Preparing for cross-compilation (!arm)         
        if: ${{!contains(matrix.target, 'arm') && !contains(matrix.target, 'darwin')}}
        run: |
          sudo apt update && sudo DEBIAN_FRONTEND='noninteractive' apt-get -y -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' upgrade && sudo apt-get -y install zip upx gcc-aarch64-linux-gnu
          cargo install cross
          rustup update
          rustup toolchain install nightly
          rustup component add rust-src --toolchain nightly
          #rustup toolchain install nightly-2023-02-15-x86_64-unknown-linux-gnu
          #rustup component add rust-src --toolchain nightly-2023-02-15-x86_64-unknown-linux-gnu
          #mv ~/.rustup/toolchains/nightly-2023-02-15-x86_64-unknown-linux-gnu ~/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu  
          
      - name: Build and compress binaries
        run: .github/workflows/build+zip.sh ${{ matrix.target }}        

      - name: Add archives to the release draft
        uses: xresloader/upload-to-github-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_ID: ${{ needs.create_release_draft.outputs.release_id }}
        with:
          release_id: ${{ env.RELEASE_ID }}
          file: "${{ github.workspace }}/target/*/release/*.zip"
          draft: true
